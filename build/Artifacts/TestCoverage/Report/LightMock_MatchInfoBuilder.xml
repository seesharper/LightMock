<?xml version="1.0" encoding="utf-8"?>
<CoverageReport scope="LightMock.MatchInfoBuilder">
  <Summary>
    <Class>LightMock.MatchInfoBuilder</Class>
    <Assembly>LightMock</Assembly>
    <Files>
      <File>/Users/bernhardrichter/GitHub/LightMock/src/LightMock/MatchInfoBuilder.cs</File>
    </Files>
    <Coveredlines>28</Coveredlines>
    <Uncoveredlines>1</Uncoveredlines>
    <Coverablelines>29</Coverablelines>
    <Totallines>125</Totallines>
    <Linecoverage>96.5</Linecoverage>
    <Coveredbranches>11</Coveredbranches>
    <Totalbranches>12</Totalbranches>
    <Branchcoverage>91.6</Branchcoverage>
  </Summary>
  <Metrics>
    <Element name="ctor">
      <Cyclomaticcomplexity>1</Cyclomaticcomplexity>
      <Linecoverage>100</Linecoverage>
      <Branchcoverage>100</Branchcoverage>
    </Element>
    <Element name="Build">
      <Cyclomaticcomplexity>4</Cyclomaticcomplexity>
      <Linecoverage>90.90</Linecoverage>
      <Branchcoverage>75.00</Branchcoverage>
    </Element>
    <Element name="VisitMethodCall">
      <Cyclomaticcomplexity>2</Cyclomaticcomplexity>
      <Linecoverage>100</Linecoverage>
      <Branchcoverage>100</Branchcoverage>
    </Element>
    <Element name="ExtractLambdaExpression">
      <Cyclomaticcomplexity>1</Cyclomaticcomplexity>
      <Linecoverage>100</Linecoverage>
      <Branchcoverage>100</Branchcoverage>
    </Element>
    <Element name="CreateEqualsExpressions">
      <Cyclomaticcomplexity>6</Cyclomaticcomplexity>
      <Linecoverage>100</Linecoverage>
      <Branchcoverage>100</Branchcoverage>
    </Element>
    <Element name="NodeRepresentsTargetMethod">
      <Cyclomaticcomplexity>1</Cyclomaticcomplexity>
      <Linecoverage>100</Linecoverage>
      <Branchcoverage>100</Branchcoverage>
    </Element>
    <Element name="CreateEqualsExpression">
      <Cyclomaticcomplexity>1</Cyclomaticcomplexity>
      <Linecoverage>100</Linecoverage>
      <Branchcoverage>100</Branchcoverage>
    </Element>
  </Metrics>
  <Files>
    <File name="/Users/bernhardrichter/GitHub/LightMock/src/LightMock/MatchInfoBuilder.cs">
      <LineAnalysis line="1" visits="-1" coverage="NotCoverable" coveredbranches="" totalbranches="" content="/*****************************************************************************" />
      <LineAnalysis line="2" visits="-1" coverage="NotCoverable" coveredbranches="" totalbranches="" content="    The MIT License (MIT)" />
      <LineAnalysis line="3" visits="-1" coverage="NotCoverable" coveredbranches="" totalbranches="" content="" />
      <LineAnalysis line="4" visits="-1" coverage="NotCoverable" coveredbranches="" totalbranches="" content="    Copyright (c) 2014 bernhard.richter@gmail.com" />
      <LineAnalysis line="5" visits="-1" coverage="NotCoverable" coveredbranches="" totalbranches="" content="" />
      <LineAnalysis line="6" visits="-1" coverage="NotCoverable" coveredbranches="" totalbranches="" content="    Permission is hereby granted, free of charge, to any person obtaining a copy" />
      <LineAnalysis line="7" visits="-1" coverage="NotCoverable" coveredbranches="" totalbranches="" content="    of this software and associated documentation files (the &quot;Software&quot;), to deal" />
      <LineAnalysis line="8" visits="-1" coverage="NotCoverable" coveredbranches="" totalbranches="" content="    in the Software without restriction, including without limitation the rights" />
      <LineAnalysis line="9" visits="-1" coverage="NotCoverable" coveredbranches="" totalbranches="" content="    to use, copy, modify, merge, publish, distribute, sublicense, and/or sell" />
      <LineAnalysis line="10" visits="-1" coverage="NotCoverable" coveredbranches="" totalbranches="" content="    copies of the Software, and to permit persons to whom the Software is" />
      <LineAnalysis line="11" visits="-1" coverage="NotCoverable" coveredbranches="" totalbranches="" content="    furnished to do so, subject to the following conditions:" />
      <LineAnalysis line="12" visits="-1" coverage="NotCoverable" coveredbranches="" totalbranches="" content="" />
      <LineAnalysis line="13" visits="-1" coverage="NotCoverable" coveredbranches="" totalbranches="" content="    The above copyright notice and this permission notice shall be included in all" />
      <LineAnalysis line="14" visits="-1" coverage="NotCoverable" coveredbranches="" totalbranches="" content="    copies or substantial portions of the Software." />
      <LineAnalysis line="15" visits="-1" coverage="NotCoverable" coveredbranches="" totalbranches="" content="" />
      <LineAnalysis line="16" visits="-1" coverage="NotCoverable" coveredbranches="" totalbranches="" content="    THE SOFTWARE IS PROVIDED &quot;AS IS&quot;, WITHOUT WARRANTY OF ANY KIND, EXPRESS OR" />
      <LineAnalysis line="17" visits="-1" coverage="NotCoverable" coveredbranches="" totalbranches="" content="    IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY," />
      <LineAnalysis line="18" visits="-1" coverage="NotCoverable" coveredbranches="" totalbranches="" content="    FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE" />
      <LineAnalysis line="19" visits="-1" coverage="NotCoverable" coveredbranches="" totalbranches="" content="    AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER" />
      <LineAnalysis line="20" visits="-1" coverage="NotCoverable" coveredbranches="" totalbranches="" content="    LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM," />
      <LineAnalysis line="21" visits="-1" coverage="NotCoverable" coveredbranches="" totalbranches="" content="    OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE" />
      <LineAnalysis line="22" visits="-1" coverage="NotCoverable" coveredbranches="" totalbranches="" content="    SOFTWARE." />
      <LineAnalysis line="23" visits="-1" coverage="NotCoverable" coveredbranches="" totalbranches="" content="******************************************************************************" />
      <LineAnalysis line="24" visits="-1" coverage="NotCoverable" coveredbranches="" totalbranches="" content="    https://github.com/seesharper/LightMock" />
      <LineAnalysis line="25" visits="-1" coverage="NotCoverable" coveredbranches="" totalbranches="" content="    http://twitter.com/bernhardrichter" />
      <LineAnalysis line="26" visits="-1" coverage="NotCoverable" coveredbranches="" totalbranches="" content="******************************************************************************/" />
      <LineAnalysis line="27" visits="-1" coverage="NotCoverable" coveredbranches="" totalbranches="" content="" />
      <LineAnalysis line="28" visits="-1" coverage="NotCoverable" coveredbranches="" totalbranches="" content="using System;" />
      <LineAnalysis line="29" visits="-1" coverage="NotCoverable" coveredbranches="" totalbranches="" content="" />
      <LineAnalysis line="30" visits="-1" coverage="NotCoverable" coveredbranches="" totalbranches="" content="namespace LightMock" />
      <LineAnalysis line="31" visits="-1" coverage="NotCoverable" coveredbranches="" totalbranches="" content="{" />
      <LineAnalysis line="32" visits="-1" coverage="NotCoverable" coveredbranches="" totalbranches="" content="    using System.Collections.ObjectModel;" />
      <LineAnalysis line="33" visits="-1" coverage="NotCoverable" coveredbranches="" totalbranches="" content="    using System.Linq;" />
      <LineAnalysis line="34" visits="-1" coverage="NotCoverable" coveredbranches="" totalbranches="" content="    using System.Linq.Expressions;" />
      <LineAnalysis line="35" visits="-1" coverage="NotCoverable" coveredbranches="" totalbranches="" content="    using System.Reflection;" />
      <LineAnalysis line="36" visits="-1" coverage="NotCoverable" coveredbranches="" totalbranches="" content="" />
      <LineAnalysis line="37" visits="-1" coverage="NotCoverable" coveredbranches="" totalbranches="" content="    /// &lt;summary&gt;" />
      <LineAnalysis line="38" visits="-1" coverage="NotCoverable" coveredbranches="" totalbranches="" content="    /// A class that is capable of building a set of" />
      <LineAnalysis line="39" visits="-1" coverage="NotCoverable" coveredbranches="" totalbranches="" content="    /// lambda expressions used to match argument values." />
      <LineAnalysis line="40" visits="-1" coverage="NotCoverable" coveredbranches="" totalbranches="" content="    /// &lt;/summary&gt;" />
      <LineAnalysis line="41" visits="-1" coverage="NotCoverable" coveredbranches="" totalbranches="" content="    internal class MatchInfoBuilder : ExpressionVisitor, IMatchInfoBuilder" />
      <LineAnalysis line="42" visits="-1" coverage="NotCoverable" coveredbranches="" totalbranches="" content="    {" />
      <LineAnalysis line="43" visits="46" coverage="Covered" coveredbranches="" totalbranches="" content="        private readonly Collection&lt;LambdaExpression&gt; lambdaExpressions = new Collection&lt;LambdaExpression&gt;();" />
      <LineAnalysis line="44" visits="-1" coverage="NotCoverable" coveredbranches="" totalbranches="" content="" />
      <LineAnalysis line="45" visits="-1" coverage="NotCoverable" coveredbranches="" totalbranches="" content="        private MethodInfo targetMethod;" />
      <LineAnalysis line="46" visits="-1" coverage="NotCoverable" coveredbranches="" totalbranches="" content="" />
      <LineAnalysis line="47" visits="-1" coverage="NotCoverable" coveredbranches="" totalbranches="" content="        /// &lt;summary&gt;" />
      <LineAnalysis line="48" visits="-1" coverage="NotCoverable" coveredbranches="" totalbranches="" content="        /// Builds a new &lt;see cref=&quot;MatchInfo&quot;/&gt; instance that is used to" />
      <LineAnalysis line="49" visits="-1" coverage="NotCoverable" coveredbranches="" totalbranches="" content="        /// match a method invocation." />
      <LineAnalysis line="50" visits="-1" coverage="NotCoverable" coveredbranches="" totalbranches="" content="        /// &lt;/summary&gt;" />
      <LineAnalysis line="51" visits="-1" coverage="NotCoverable" coveredbranches="" totalbranches="" content="        /// &lt;param name=&quot;expression&quot;&gt;The target &lt;see cref=&quot;LambdaExpression&quot;/&gt;.&lt;/param&gt;" />
      <LineAnalysis line="52" visits="-1" coverage="NotCoverable" coveredbranches="" totalbranches="" content="        /// &lt;returns&gt;A &lt;see cref=&quot;MatchInfo&quot;/&gt; instance that represents the target method" />
      <LineAnalysis line="53" visits="-1" coverage="NotCoverable" coveredbranches="" totalbranches="" content="        /// and a &lt;see cref=&quot;LambdaExpression&quot;/&gt; list where each element represents" />
      <LineAnalysis line="54" visits="-1" coverage="NotCoverable" coveredbranches="" totalbranches="" content="        /// matching an argument value.&lt;/returns&gt;" />
      <LineAnalysis line="55" visits="-1" coverage="NotCoverable" coveredbranches="" totalbranches="" content="        public MatchInfo Build(LambdaExpression expression)" />
      <LineAnalysis line="56" visits="-1" coverage="NotCoverable" coveredbranches="" totalbranches="" content="        {" />
      <LineAnalysis line="57" visits="46" coverage="Covered" coveredbranches="" totalbranches="" content="            var methodCallExpresssion = expression.Body as MethodCallExpression;" />
      <LineAnalysis line="58" visits="46" coverage="Covered" coveredbranches="2" totalbranches="2" content="            if (methodCallExpresssion != null)" />
      <LineAnalysis line="59" visits="-1" coverage="NotCoverable" coveredbranches="" totalbranches="" content="            {" />
      <LineAnalysis line="60" visits="42" coverage="Covered" coveredbranches="" totalbranches="" content="                targetMethod = methodCallExpresssion.Method;" />
      <LineAnalysis line="61" visits="42" coverage="Covered" coveredbranches="" totalbranches="" content="                Visit(expression);" />
      <LineAnalysis line="62" visits="42" coverage="Covered" coveredbranches="" totalbranches="" content="                return new MatchInfo(targetMethod, lambdaExpressions.ToArray());" />
      <LineAnalysis line="63" visits="-1" coverage="NotCoverable" coveredbranches="" totalbranches="" content="            }" />
      <LineAnalysis line="64" visits="4" coverage="Covered" coveredbranches="" totalbranches="" content="            var memberExpression = expression.Body as MemberExpression;" />
      <LineAnalysis line="65" visits="4" coverage="PartiallyCovered" coveredbranches="1" totalbranches="2" content="            if (memberExpression != null)" />
      <LineAnalysis line="66" visits="-1" coverage="NotCoverable" coveredbranches="" totalbranches="" content="            {" />
      <LineAnalysis line="67" visits="4" coverage="Covered" coveredbranches="" totalbranches="" content="                var memberInfo = memberExpression.Member;" />
      <LineAnalysis line="68" visits="4" coverage="Covered" coveredbranches="" totalbranches="" content="                Visit(expression);" />
      <LineAnalysis line="69" visits="4" coverage="Covered" coveredbranches="" totalbranches="" content="                return new MatchInfo(memberInfo);" />
      <LineAnalysis line="70" visits="-1" coverage="NotCoverable" coveredbranches="" totalbranches="" content="            }" />
      <LineAnalysis line="71" visits="-1" coverage="NotCoverable" coveredbranches="" totalbranches="" content="" />
      <LineAnalysis line="72" visits="0" coverage="NotCovered" coveredbranches="" totalbranches="" content="            throw new NotSupportedException(string.Format(&quot;Expression type ({0}) not supported.&quot;, expression.Body.NodeType));" />
      <LineAnalysis line="73" visits="-1" coverage="NotCoverable" coveredbranches="" totalbranches="" content="        }" />
      <LineAnalysis line="74" visits="-1" coverage="NotCoverable" coveredbranches="" totalbranches="" content="" />
      <LineAnalysis line="75" visits="-1" coverage="NotCoverable" coveredbranches="" totalbranches="" content="        /// &lt;summary&gt;" />
      <LineAnalysis line="76" visits="-1" coverage="NotCoverable" coveredbranches="" totalbranches="" content="        /// Visits the &lt;see cref=&quot;MethodCallExpression&quot;/&gt; and creates a match" />
      <LineAnalysis line="77" visits="-1" coverage="NotCoverable" coveredbranches="" totalbranches="" content="        /// expression for each argument." />
      <LineAnalysis line="78" visits="-1" coverage="NotCoverable" coveredbranches="" totalbranches="" content="        /// &lt;/summary&gt;" />
      <LineAnalysis line="79" visits="-1" coverage="NotCoverable" coveredbranches="" totalbranches="" content="        /// &lt;param name=&quot;node&quot;&gt;The &lt;see cref=&quot;MethodCallExpression&quot;/&gt; to visit.&lt;/param&gt;" />
      <LineAnalysis line="80" visits="-1" coverage="NotCoverable" coveredbranches="" totalbranches="" content="        /// &lt;returns&gt;&lt;see cref=&quot;MethodCallExpression&quot;/&gt;.&lt;/returns&gt;" />
      <LineAnalysis line="81" visits="-1" coverage="NotCoverable" coveredbranches="" totalbranches="" content="        protected override Expression VisitMethodCall(MethodCallExpression node)" />
      <LineAnalysis line="82" visits="-1" coverage="NotCoverable" coveredbranches="" totalbranches="" content="        {" />
      <LineAnalysis line="83" visits="84" coverage="Covered" coveredbranches="2" totalbranches="2" content="            if (NodeRepresentsTargetMethod(node))" />
      <LineAnalysis line="84" visits="-1" coverage="NotCoverable" coveredbranches="" totalbranches="" content="            {" />
      <LineAnalysis line="85" visits="42" coverage="Covered" coveredbranches="" totalbranches="" content="                CreateEqualsExpressions(node);" />
      <LineAnalysis line="86" visits="-1" coverage="NotCoverable" coveredbranches="" totalbranches="" content="            }" />
      <LineAnalysis line="87" visits="-1" coverage="NotCoverable" coveredbranches="" totalbranches="" content="" />
      <LineAnalysis line="88" visits="84" coverage="Covered" coveredbranches="" totalbranches="" content="            return base.VisitMethodCall(node);" />
      <LineAnalysis line="89" visits="-1" coverage="NotCoverable" coveredbranches="" totalbranches="" content="        }" />
      <LineAnalysis line="90" visits="-1" coverage="NotCoverable" coveredbranches="" totalbranches="" content="" />
      <LineAnalysis line="91" visits="-1" coverage="NotCoverable" coveredbranches="" totalbranches="" content="        private void ExtractLambdaExpression(MethodCallExpression node)" />
      <LineAnalysis line="92" visits="-1" coverage="NotCoverable" coveredbranches="" totalbranches="" content="        {" />
      <LineAnalysis line="93" visits="41" coverage="Covered" coveredbranches="" totalbranches="" content="            var lambdaExpression = (LambdaExpression)node.Arguments[0];" />
      <LineAnalysis line="94" visits="41" coverage="Covered" coveredbranches="" totalbranches="" content="            lambdaExpressions.Add(lambdaExpression);" />
      <LineAnalysis line="95" visits="41" coverage="Covered" coveredbranches="" totalbranches="" content="        }" />
      <LineAnalysis line="96" visits="-1" coverage="NotCoverable" coveredbranches="" totalbranches="" content="" />
      <LineAnalysis line="97" visits="-1" coverage="NotCoverable" coveredbranches="" totalbranches="" content="        private void CreateEqualsExpressions(MethodCallExpression node)" />
      <LineAnalysis line="98" visits="-1" coverage="NotCoverable" coveredbranches="" totalbranches="" content="        {" />
      <LineAnalysis line="99" visits="210" coverage="Covered" coveredbranches="2" totalbranches="2" content="            foreach (var argument in node.Arguments)" />
      <LineAnalysis line="100" visits="-1" coverage="NotCoverable" coveredbranches="" totalbranches="" content="            {" />
      <LineAnalysis line="101" visits="63" coverage="Covered" coveredbranches="2" totalbranches="2" content="                if (argument.NodeType == ExpressionType.Constant)" />
      <LineAnalysis line="102" visits="-1" coverage="NotCoverable" coveredbranches="" totalbranches="" content="                {" />
      <LineAnalysis line="103" visits="22" coverage="Covered" coveredbranches="" totalbranches="" content="                    CreateEqualsExpression((ConstantExpression)argument);" />
      <LineAnalysis line="104" visits="-1" coverage="NotCoverable" coveredbranches="" totalbranches="" content="                }" />
      <LineAnalysis line="105" visits="-1" coverage="NotCoverable" coveredbranches="" totalbranches="" content="" />
      <LineAnalysis line="106" visits="63" coverage="Covered" coveredbranches="2" totalbranches="2" content="                if (argument.NodeType == ExpressionType.Call)" />
      <LineAnalysis line="107" visits="-1" coverage="NotCoverable" coveredbranches="" totalbranches="" content="                {" />
      <LineAnalysis line="108" visits="41" coverage="Covered" coveredbranches="" totalbranches="" content="                    ExtractLambdaExpression((MethodCallExpression)argument);" />
      <LineAnalysis line="109" visits="-1" coverage="NotCoverable" coveredbranches="" totalbranches="" content="                }" />
      <LineAnalysis line="110" visits="-1" coverage="NotCoverable" coveredbranches="" totalbranches="" content="            }" />
      <LineAnalysis line="111" visits="42" coverage="Covered" coveredbranches="" totalbranches="" content="        }" />
      <LineAnalysis line="112" visits="-1" coverage="NotCoverable" coveredbranches="" totalbranches="" content="" />
      <LineAnalysis line="113" visits="-1" coverage="NotCoverable" coveredbranches="" totalbranches="" content="        private bool NodeRepresentsTargetMethod(MethodCallExpression node)" />
      <LineAnalysis line="114" visits="-1" coverage="NotCoverable" coveredbranches="" totalbranches="" content="        {" />
      <LineAnalysis line="115" visits="84" coverage="Covered" coveredbranches="" totalbranches="" content="            return node.Method == targetMethod;" />
      <LineAnalysis line="116" visits="-1" coverage="NotCoverable" coveredbranches="" totalbranches="" content="        }" />
      <LineAnalysis line="117" visits="-1" coverage="NotCoverable" coveredbranches="" totalbranches="" content="" />
      <LineAnalysis line="118" visits="-1" coverage="NotCoverable" coveredbranches="" totalbranches="" content="        private void CreateEqualsExpression(ConstantExpression constantExpression)" />
      <LineAnalysis line="119" visits="-1" coverage="NotCoverable" coveredbranches="" totalbranches="" content="        {" />
      <LineAnalysis line="120" visits="22" coverage="Covered" coveredbranches="" totalbranches="" content="            ParameterExpression parameterExpression = Expression.Parameter(constantExpression.Type, &quot;p&quot;);" />
      <LineAnalysis line="121" visits="22" coverage="Covered" coveredbranches="" totalbranches="" content="            BinaryExpression equalExpression = Expression.Equal(parameterExpression, constantExpression);" />
      <LineAnalysis line="122" visits="22" coverage="Covered" coveredbranches="" totalbranches="" content="            lambdaExpressions.Add(Expression.Lambda(equalExpression, parameterExpression));" />
      <LineAnalysis line="123" visits="22" coverage="Covered" coveredbranches="" totalbranches="" content="        }" />
      <LineAnalysis line="124" visits="-1" coverage="NotCoverable" coveredbranches="" totalbranches="" content="    }" />
      <LineAnalysis line="125" visits="-1" coverage="NotCoverable" coveredbranches="" totalbranches="" content="}" />
    </File>
  </Files>
</CoverageReport>