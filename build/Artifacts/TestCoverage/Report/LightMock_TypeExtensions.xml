<?xml version="1.0" encoding="utf-8"?>
<CoverageReport scope="ExpressionReflect.TypeExtensions">
  <Summary>
    <Class>ExpressionReflect.TypeExtensions</Class>
    <Assembly>LightMock</Assembly>
    <Files>
      <File>/Users/bernhardrichter/GitHub/LightMock/src/LightMock/ExpressionReflect/TypeExtensions.cs</File>
    </Files>
    <Coveredlines>0</Coveredlines>
    <Uncoveredlines>24</Uncoveredlines>
    <Coverablelines>24</Coverablelines>
    <Totallines>61</Totallines>
    <Linecoverage>0</Linecoverage>
    <Coveredbranches>0</Coveredbranches>
    <Totalbranches>24</Totalbranches>
    <Branchcoverage>0</Branchcoverage>
  </Summary>
  <Metrics>
    <Element name="IsFunc">
      <Cyclomaticcomplexity>10</Cyclomaticcomplexity>
      <Linecoverage>0</Linecoverage>
      <Branchcoverage>0</Branchcoverage>
    </Element>
    <Element name="IsAction">
      <Cyclomaticcomplexity>10</Cyclomaticcomplexity>
      <Linecoverage>0</Linecoverage>
      <Branchcoverage>0</Branchcoverage>
    </Element>
    <Element name="IsPredicate">
      <Cyclomaticcomplexity>2</Cyclomaticcomplexity>
      <Linecoverage>0</Linecoverage>
      <Branchcoverage>0</Branchcoverage>
    </Element>
    <Element name="IsInstanceOfType">
      <Cyclomaticcomplexity>2</Cyclomaticcomplexity>
      <Linecoverage>0</Linecoverage>
      <Branchcoverage>0</Branchcoverage>
    </Element>
  </Metrics>
  <Files>
    <File name="/Users/bernhardrichter/GitHub/LightMock/src/LightMock/ExpressionReflect/TypeExtensions.cs">
      <LineAnalysis line="1" visits="-1" coverage="NotCoverable" coveredbranches="" totalbranches="" content="namespace ExpressionReflect" />
      <LineAnalysis line="2" visits="-1" coverage="NotCoverable" coveredbranches="" totalbranches="" content="{" />
      <LineAnalysis line="3" visits="-1" coverage="NotCoverable" coveredbranches="" totalbranches="" content="&#x9;using System;" />
      <LineAnalysis line="4" visits="-1" coverage="NotCoverable" coveredbranches="" totalbranches="" content="    using System.Reflection;" />
      <LineAnalysis line="5" visits="-1" coverage="NotCoverable" coveredbranches="" totalbranches="" content="" />
      <LineAnalysis line="6" visits="-1" coverage="NotCoverable" coveredbranches="" totalbranches="" content="    internal static class TypeExtensions" />
      <LineAnalysis line="7" visits="-1" coverage="NotCoverable" coveredbranches="" totalbranches="" content="&#x9;{" />
      <LineAnalysis line="8" visits="-1" coverage="NotCoverable" coveredbranches="" totalbranches="" content="&#x9;&#x9;internal static bool IsFunc(this Type type)" />
      <LineAnalysis line="9" visits="-1" coverage="NotCoverable" coveredbranches="" totalbranches="" content="&#x9;&#x9;{" />
      <LineAnalysis line="10" visits="0" coverage="NotCovered" coveredbranches="" totalbranches="" content="&#x9;&#x9;&#x9;bool isFunc = false;" />
      <LineAnalysis line="11" visits="-1" coverage="NotCoverable" coveredbranches="" totalbranches="" content="" />
      <LineAnalysis line="12" visits="0" coverage="NotCovered" coveredbranches="0" totalbranches="2" content="&#x9;&#x9;&#x9;if (type.GetTypeInfo().IsGenericType)" />
      <LineAnalysis line="13" visits="-1" coverage="NotCoverable" coveredbranches="" totalbranches="" content="&#x9;&#x9;&#x9;{" />
      <LineAnalysis line="14" visits="0" coverage="NotCovered" coveredbranches="" totalbranches="" content="&#x9;&#x9;&#x9;&#x9;Type definition = type.GetGenericTypeDefinition();" />
      <LineAnalysis line="15" visits="0" coverage="NotCovered" coveredbranches="0" totalbranches="8" content="&#x9;&#x9;&#x9;&#x9;isFunc = definition == typeof(Func&lt;&gt;) ||" />
      <LineAnalysis line="16" visits="0" coverage="NotCovered" coveredbranches="" totalbranches="" content="&#x9;&#x9;&#x9;&#x9;&#x9;definition == typeof(Func&lt;,&gt;) ||" />
      <LineAnalysis line="17" visits="0" coverage="NotCovered" coveredbranches="" totalbranches="" content="&#x9;&#x9;&#x9;&#x9;&#x9;definition == typeof(Func&lt;,,&gt;) ||" />
      <LineAnalysis line="18" visits="0" coverage="NotCovered" coveredbranches="" totalbranches="" content="&#x9;&#x9;&#x9;&#x9;&#x9;definition == typeof(Func&lt;,,,&gt;) ||" />
      <LineAnalysis line="19" visits="0" coverage="NotCovered" coveredbranches="" totalbranches="" content="&#x9;&#x9;&#x9;&#x9;&#x9;definition == typeof(Func&lt;,,,,&gt;);" />
      <LineAnalysis line="20" visits="-1" coverage="NotCoverable" coveredbranches="" totalbranches="" content="&#x9;&#x9;&#x9;}" />
      <LineAnalysis line="21" visits="-1" coverage="NotCoverable" coveredbranches="" totalbranches="" content="" />
      <LineAnalysis line="22" visits="0" coverage="NotCovered" coveredbranches="" totalbranches="" content="&#x9;&#x9;&#x9;return isFunc;" />
      <LineAnalysis line="23" visits="-1" coverage="NotCoverable" coveredbranches="" totalbranches="" content="&#x9;&#x9;}" />
      <LineAnalysis line="24" visits="-1" coverage="NotCoverable" coveredbranches="" totalbranches="" content="" />
      <LineAnalysis line="25" visits="-1" coverage="NotCoverable" coveredbranches="" totalbranches="" content="&#x9;&#x9;internal static bool IsAction(this Type type)" />
      <LineAnalysis line="26" visits="-1" coverage="NotCoverable" coveredbranches="" totalbranches="" content="&#x9;&#x9;{" />
      <LineAnalysis line="27" visits="0" coverage="NotCovered" coveredbranches="" totalbranches="" content="&#x9;&#x9;&#x9;bool isAction = type == typeof(Action);" />
      <LineAnalysis line="28" visits="-1" coverage="NotCoverable" coveredbranches="" totalbranches="" content="" />
      <LineAnalysis line="29" visits="0" coverage="NotCovered" coveredbranches="0" totalbranches="2" content="&#x9;&#x9;&#x9;if (type.GetTypeInfo().IsGenericType)" />
      <LineAnalysis line="30" visits="-1" coverage="NotCoverable" coveredbranches="" totalbranches="" content="&#x9;&#x9;&#x9;{" />
      <LineAnalysis line="31" visits="0" coverage="NotCovered" coveredbranches="" totalbranches="" content="&#x9;&#x9;&#x9;&#x9;Type definition = type.GetGenericTypeDefinition();" />
      <LineAnalysis line="32" visits="-1" coverage="NotCoverable" coveredbranches="" totalbranches="" content="" />
      <LineAnalysis line="33" visits="0" coverage="NotCovered" coveredbranches="0" totalbranches="8" content="&#x9;&#x9;&#x9;&#x9;isAction = isAction ||" />
      <LineAnalysis line="34" visits="0" coverage="NotCovered" coveredbranches="" totalbranches="" content="&#x9;&#x9;&#x9;&#x9;&#x9;definition == typeof(Action&lt;&gt;) ||" />
      <LineAnalysis line="35" visits="0" coverage="NotCovered" coveredbranches="" totalbranches="" content="&#x9;&#x9;&#x9;&#x9;&#x9;definition == typeof(Action&lt;,&gt;) ||" />
      <LineAnalysis line="36" visits="0" coverage="NotCovered" coveredbranches="" totalbranches="" content="&#x9;&#x9;&#x9;&#x9;&#x9;definition == typeof(Action&lt;,,&gt;) ||" />
      <LineAnalysis line="37" visits="0" coverage="NotCovered" coveredbranches="" totalbranches="" content="&#x9;&#x9;&#x9;&#x9;&#x9;definition == typeof(Action&lt;,,,&gt;);" />
      <LineAnalysis line="38" visits="-1" coverage="NotCoverable" coveredbranches="" totalbranches="" content="&#x9;&#x9;&#x9;}" />
      <LineAnalysis line="39" visits="-1" coverage="NotCoverable" coveredbranches="" totalbranches="" content="" />
      <LineAnalysis line="40" visits="0" coverage="NotCovered" coveredbranches="" totalbranches="" content="&#x9;&#x9;&#x9;return isAction;" />
      <LineAnalysis line="41" visits="-1" coverage="NotCoverable" coveredbranches="" totalbranches="" content="&#x9;&#x9;}" />
      <LineAnalysis line="42" visits="-1" coverage="NotCoverable" coveredbranches="" totalbranches="" content="" />
      <LineAnalysis line="43" visits="-1" coverage="NotCoverable" coveredbranches="" totalbranches="" content="&#x9;&#x9;internal static bool IsPredicate(this Type type)" />
      <LineAnalysis line="44" visits="-1" coverage="NotCoverable" coveredbranches="" totalbranches="" content="&#x9;&#x9;{" />
      <LineAnalysis line="45" visits="0" coverage="NotCovered" coveredbranches="" totalbranches="" content="&#x9;&#x9;&#x9;bool isPredicate = false;" />
      <LineAnalysis line="46" visits="-1" coverage="NotCoverable" coveredbranches="" totalbranches="" content="" />
      <LineAnalysis line="47" visits="0" coverage="NotCovered" coveredbranches="0" totalbranches="2" content="&#x9;&#x9;&#x9;if (type.GetTypeInfo().IsGenericType)" />
      <LineAnalysis line="48" visits="-1" coverage="NotCoverable" coveredbranches="" totalbranches="" content="&#x9;&#x9;&#x9;{" />
      <LineAnalysis line="49" visits="0" coverage="NotCovered" coveredbranches="" totalbranches="" content="&#x9;&#x9;&#x9;&#x9;Type definition = type.GetGenericTypeDefinition();" />
      <LineAnalysis line="50" visits="0" coverage="NotCovered" coveredbranches="" totalbranches="" content="&#x9;&#x9;&#x9;&#x9;isPredicate = definition == typeof(Predicate&lt;&gt;);" />
      <LineAnalysis line="51" visits="-1" coverage="NotCoverable" coveredbranches="" totalbranches="" content="&#x9;&#x9;&#x9;}" />
      <LineAnalysis line="52" visits="-1" coverage="NotCoverable" coveredbranches="" totalbranches="" content="" />
      <LineAnalysis line="53" visits="0" coverage="NotCovered" coveredbranches="" totalbranches="" content="&#x9;&#x9;&#x9;return isPredicate;" />
      <LineAnalysis line="54" visits="-1" coverage="NotCoverable" coveredbranches="" totalbranches="" content="&#x9;&#x9;}" />
      <LineAnalysis line="55" visits="-1" coverage="NotCoverable" coveredbranches="" totalbranches="" content="" />
      <LineAnalysis line="56" visits="-1" coverage="NotCoverable" coveredbranches="" totalbranches="" content="        internal static bool IsInstanceOfType(this Type type, object obj)" />
      <LineAnalysis line="57" visits="-1" coverage="NotCoverable" coveredbranches="" totalbranches="" content="        {" />
      <LineAnalysis line="58" visits="0" coverage="NotCovered" coveredbranches="0" totalbranches="2" content="            return obj != null &amp;&amp; type.GetTypeInfo().IsAssignableFrom(obj.GetType().GetTypeInfo());" />
      <LineAnalysis line="59" visits="-1" coverage="NotCoverable" coveredbranches="" totalbranches="" content="        }" />
      <LineAnalysis line="60" visits="-1" coverage="NotCoverable" coveredbranches="" totalbranches="" content="    }" />
      <LineAnalysis line="61" visits="-1" coverage="NotCoverable" coveredbranches="" totalbranches="" content="}" />
    </File>
  </Files>
</CoverageReport>