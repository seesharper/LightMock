<?xml version="1.0" encoding="utf-8"?>
<CoverageReport scope="ExpressionReflect.Evaluator">
  <Summary>
    <Class>ExpressionReflect.Evaluator</Class>
    <Assembly>LightMock</Assembly>
    <Files>
      <File>/Users/bernhardrichter/GitHub/LightMock/src/LightMock/ExpressionReflect/Evaluator.cs</File>
    </Files>
    <Coveredlines>31</Coveredlines>
    <Uncoveredlines>2</Uncoveredlines>
    <Coverablelines>33</Coverablelines>
    <Totallines>130</Totallines>
    <Linecoverage>93.9</Linecoverage>
    <Coveredbranches>14</Coveredbranches>
    <Totalbranches>14</Totalbranches>
    <Branchcoverage>100</Branchcoverage>
  </Summary>
  <Metrics>
    <Element name="PartialEval">
      <Cyclomaticcomplexity>1</Cyclomaticcomplexity>
      <Linecoverage>0</Linecoverage>
      <Branchcoverage>100</Branchcoverage>
    </Element>
    <Element name="PartialEval">
      <Cyclomaticcomplexity>1</Cyclomaticcomplexity>
      <Linecoverage>100</Linecoverage>
      <Branchcoverage>100</Branchcoverage>
    </Element>
    <Element name="CanBeEvaluatedLocally">
      <Cyclomaticcomplexity>1</Cyclomaticcomplexity>
      <Linecoverage>0</Linecoverage>
      <Branchcoverage>100</Branchcoverage>
    </Element>
    <Element name="ctor">
      <Cyclomaticcomplexity>1</Cyclomaticcomplexity>
      <Linecoverage>100</Linecoverage>
      <Branchcoverage>100</Branchcoverage>
    </Element>
    <Element name="Eval">
      <Cyclomaticcomplexity>1</Cyclomaticcomplexity>
      <Linecoverage>100</Linecoverage>
      <Branchcoverage>100</Branchcoverage>
    </Element>
    <Element name="Visit">
      <Cyclomaticcomplexity>4</Cyclomaticcomplexity>
      <Linecoverage>100</Linecoverage>
      <Branchcoverage>100</Branchcoverage>
    </Element>
    <Element name="Evaluate">
      <Cyclomaticcomplexity>2</Cyclomaticcomplexity>
      <Linecoverage>100</Linecoverage>
      <Branchcoverage>100</Branchcoverage>
    </Element>
    <Element name="ctor">
      <Cyclomaticcomplexity>1</Cyclomaticcomplexity>
      <Linecoverage>100</Linecoverage>
      <Branchcoverage>100</Branchcoverage>
    </Element>
    <Element name="Nominate">
      <Cyclomaticcomplexity>1</Cyclomaticcomplexity>
      <Linecoverage>100</Linecoverage>
      <Branchcoverage>100</Branchcoverage>
    </Element>
    <Element name="Visit">
      <Cyclomaticcomplexity>8</Cyclomaticcomplexity>
      <Linecoverage>100</Linecoverage>
      <Branchcoverage>100</Branchcoverage>
    </Element>
  </Metrics>
  <Files>
    <File name="/Users/bernhardrichter/GitHub/LightMock/src/LightMock/ExpressionReflect/Evaluator.cs">
      <LineAnalysis line="1" visits="-1" coverage="NotCoverable" coveredbranches="" totalbranches="" content="namespace ExpressionReflect" />
      <LineAnalysis line="2" visits="-1" coverage="NotCoverable" coveredbranches="" totalbranches="" content="{" />
      <LineAnalysis line="3" visits="-1" coverage="NotCoverable" coveredbranches="" totalbranches="" content="&#x9;using System;" />
      <LineAnalysis line="4" visits="-1" coverage="NotCoverable" coveredbranches="" totalbranches="" content="&#x9;using System.Collections.Generic;" />
      <LineAnalysis line="5" visits="-1" coverage="NotCoverable" coveredbranches="" totalbranches="" content="&#x9;using System.Linq.Expressions;" />
      <LineAnalysis line="6" visits="-1" coverage="NotCoverable" coveredbranches="" totalbranches="" content="" />
      <LineAnalysis line="7" visits="-1" coverage="NotCoverable" coveredbranches="" totalbranches="" content="&#x9;/// &lt;summary&gt;" />
      <LineAnalysis line="8" visits="-1" coverage="NotCoverable" coveredbranches="" totalbranches="" content="&#x9;/// Enables the partial evaluation of queries." />
      <LineAnalysis line="9" visits="-1" coverage="NotCoverable" coveredbranches="" totalbranches="" content="&#x9;/// &lt;/summary&gt;" />
      <LineAnalysis line="10" visits="-1" coverage="NotCoverable" coveredbranches="" totalbranches="" content="&#x9;/// &lt;remarks&gt;" />
      <LineAnalysis line="11" visits="-1" coverage="NotCoverable" coveredbranches="" totalbranches="" content="&#x9;/// From http://msdn.microsoft.com/en-us/library/bb546158.aspx" />
      <LineAnalysis line="12" visits="-1" coverage="NotCoverable" coveredbranches="" totalbranches="" content="&#x9;/// &lt;/remarks&gt;" />
      <LineAnalysis line="13" visits="-1" coverage="NotCoverable" coveredbranches="" totalbranches="" content="&#x9;public static class Evaluator" />
      <LineAnalysis line="14" visits="-1" coverage="NotCoverable" coveredbranches="" totalbranches="" content="&#x9;{" />
      <LineAnalysis line="15" visits="-1" coverage="NotCoverable" coveredbranches="" totalbranches="" content="&#x9;&#x9;/// &lt;summary&gt;" />
      <LineAnalysis line="16" visits="-1" coverage="NotCoverable" coveredbranches="" totalbranches="" content="&#x9;&#x9;/// Performs evaluation &amp; replacement of independent sub-trees" />
      <LineAnalysis line="17" visits="-1" coverage="NotCoverable" coveredbranches="" totalbranches="" content="&#x9;&#x9;/// &lt;/summary&gt;" />
      <LineAnalysis line="18" visits="-1" coverage="NotCoverable" coveredbranches="" totalbranches="" content="&#x9;&#x9;/// &lt;param name=&quot;expression&quot;&gt;The root of the expression tree.&lt;/param&gt;" />
      <LineAnalysis line="19" visits="-1" coverage="NotCoverable" coveredbranches="" totalbranches="" content="&#x9;&#x9;/// &lt;returns&gt;A new tree with sub-trees evaluated and replaced.&lt;/returns&gt;" />
      <LineAnalysis line="20" visits="-1" coverage="NotCoverable" coveredbranches="" totalbranches="" content="&#x9;&#x9;public static Expression PartialEval(this Expression expression)" />
      <LineAnalysis line="21" visits="-1" coverage="NotCoverable" coveredbranches="" totalbranches="" content="&#x9;&#x9;{" />
      <LineAnalysis line="22" visits="0" coverage="NotCovered" coveredbranches="" totalbranches="" content="&#x9;&#x9;&#x9;return PartialEval(expression, Evaluator.CanBeEvaluatedLocally);" />
      <LineAnalysis line="23" visits="-1" coverage="NotCoverable" coveredbranches="" totalbranches="" content="&#x9;&#x9;}" />
      <LineAnalysis line="24" visits="-1" coverage="NotCoverable" coveredbranches="" totalbranches="" content="" />
      <LineAnalysis line="25" visits="-1" coverage="NotCoverable" coveredbranches="" totalbranches="" content="&#x9;&#x9;/// &lt;summary&gt;" />
      <LineAnalysis line="26" visits="-1" coverage="NotCoverable" coveredbranches="" totalbranches="" content="&#x9;&#x9;/// Performs evaluation &amp; replacement of independent sub-trees" />
      <LineAnalysis line="27" visits="-1" coverage="NotCoverable" coveredbranches="" totalbranches="" content="&#x9;&#x9;/// &lt;/summary&gt;" />
      <LineAnalysis line="28" visits="-1" coverage="NotCoverable" coveredbranches="" totalbranches="" content="&#x9;&#x9;/// &lt;param name=&quot;expression&quot;&gt;The root of the expression tree.&lt;/param&gt;" />
      <LineAnalysis line="29" visits="-1" coverage="NotCoverable" coveredbranches="" totalbranches="" content="&#x9;&#x9;/// &lt;param name=&quot;fnCanBeEvaluated&quot;&gt;A function that decides whether a given expression node can be part of the local function.&lt;/param&gt;" />
      <LineAnalysis line="30" visits="-1" coverage="NotCoverable" coveredbranches="" totalbranches="" content="&#x9;&#x9;/// &lt;returns&gt;A new tree with sub-trees evaluated and replaced.&lt;/returns&gt;" />
      <LineAnalysis line="31" visits="-1" coverage="NotCoverable" coveredbranches="" totalbranches="" content="&#x9;&#x9;public static Expression PartialEval(this Expression expression, Func&lt;Expression, bool&gt; fnCanBeEvaluated)" />
      <LineAnalysis line="32" visits="-1" coverage="NotCoverable" coveredbranches="" totalbranches="" content="&#x9;&#x9;{" />
      <LineAnalysis line="33" visits="105" coverage="Covered" coveredbranches="" totalbranches="" content="&#x9;&#x9;&#x9;return new SubtreeEvaluator(new Nominator(fnCanBeEvaluated).Nominate(expression)).Eval(expression);" />
      <LineAnalysis line="34" visits="-1" coverage="NotCoverable" coveredbranches="" totalbranches="" content="&#x9;&#x9;}" />
      <LineAnalysis line="35" visits="-1" coverage="NotCoverable" coveredbranches="" totalbranches="" content="" />
      <LineAnalysis line="36" visits="-1" coverage="NotCoverable" coveredbranches="" totalbranches="" content="&#x9;&#x9;private static bool CanBeEvaluatedLocally(Expression expression)" />
      <LineAnalysis line="37" visits="-1" coverage="NotCoverable" coveredbranches="" totalbranches="" content="&#x9;&#x9;{" />
      <LineAnalysis line="38" visits="0" coverage="NotCovered" coveredbranches="" totalbranches="" content="&#x9;&#x9;&#x9;return expression.NodeType != ExpressionType.Parameter;" />
      <LineAnalysis line="39" visits="-1" coverage="NotCoverable" coveredbranches="" totalbranches="" content="&#x9;&#x9;}" />
      <LineAnalysis line="40" visits="-1" coverage="NotCoverable" coveredbranches="" totalbranches="" content="" />
      <LineAnalysis line="41" visits="-1" coverage="NotCoverable" coveredbranches="" totalbranches="" content="&#x9;&#x9;/// &lt;summary&gt;" />
      <LineAnalysis line="42" visits="-1" coverage="NotCoverable" coveredbranches="" totalbranches="" content="&#x9;&#x9;/// Evaluates &amp; replaces sub-trees when first candidate is reached (top-down)" />
      <LineAnalysis line="43" visits="-1" coverage="NotCoverable" coveredbranches="" totalbranches="" content="&#x9;&#x9;/// &lt;/summary&gt;" />
      <LineAnalysis line="44" visits="-1" coverage="NotCoverable" coveredbranches="" totalbranches="" content="&#x9;&#x9;private class SubtreeEvaluator : ExpressionVisitor" />
      <LineAnalysis line="45" visits="-1" coverage="NotCoverable" coveredbranches="" totalbranches="" content="&#x9;&#x9;{" />
      <LineAnalysis line="46" visits="-1" coverage="NotCoverable" coveredbranches="" totalbranches="" content="&#x9;&#x9;&#x9;private readonly IDictionary&lt;Expression, Expression&gt; candidates;" />
      <LineAnalysis line="47" visits="-1" coverage="NotCoverable" coveredbranches="" totalbranches="" content="" />
      <LineAnalysis line="48" visits="105" coverage="Covered" coveredbranches="" totalbranches="" content="&#x9;&#x9;&#x9;internal SubtreeEvaluator(IDictionary&lt;Expression, Expression&gt; candidates)" />
      <LineAnalysis line="49" visits="-1" coverage="NotCoverable" coveredbranches="" totalbranches="" content="&#x9;&#x9;&#x9;{" />
      <LineAnalysis line="50" visits="105" coverage="Covered" coveredbranches="" totalbranches="" content="&#x9;&#x9;&#x9;&#x9;this.candidates = candidates;" />
      <LineAnalysis line="51" visits="105" coverage="Covered" coveredbranches="" totalbranches="" content="&#x9;&#x9;&#x9;}" />
      <LineAnalysis line="52" visits="-1" coverage="NotCoverable" coveredbranches="" totalbranches="" content="" />
      <LineAnalysis line="53" visits="-1" coverage="NotCoverable" coveredbranches="" totalbranches="" content="&#x9;&#x9;&#x9;internal Expression Eval(Expression exp)" />
      <LineAnalysis line="54" visits="-1" coverage="NotCoverable" coveredbranches="" totalbranches="" content="&#x9;&#x9;&#x9;{" />
      <LineAnalysis line="55" visits="105" coverage="Covered" coveredbranches="" totalbranches="" content="&#x9;&#x9;&#x9;&#x9;return this.Visit(exp);" />
      <LineAnalysis line="56" visits="-1" coverage="NotCoverable" coveredbranches="" totalbranches="" content="&#x9;&#x9;&#x9;}" />
      <LineAnalysis line="57" visits="-1" coverage="NotCoverable" coveredbranches="" totalbranches="" content="" />
      <LineAnalysis line="58" visits="-1" coverage="NotCoverable" coveredbranches="" totalbranches="" content="&#x9;&#x9;&#x9;public override Expression Visit(Expression exp)" />
      <LineAnalysis line="59" visits="-1" coverage="NotCoverable" coveredbranches="" totalbranches="" content="&#x9;&#x9;&#x9;{" />
      <LineAnalysis line="60" visits="740" coverage="Covered" coveredbranches="2" totalbranches="2" content="&#x9;&#x9;&#x9;&#x9;if (exp == null)" />
      <LineAnalysis line="61" visits="-1" coverage="NotCoverable" coveredbranches="" totalbranches="" content="&#x9;&#x9;&#x9;&#x9;{" />
      <LineAnalysis line="62" visits="42" coverage="Covered" coveredbranches="" totalbranches="" content="&#x9;&#x9;&#x9;&#x9;&#x9;return null;" />
      <LineAnalysis line="63" visits="-1" coverage="NotCoverable" coveredbranches="" totalbranches="" content="&#x9;&#x9;&#x9;&#x9;}" />
      <LineAnalysis line="64" visits="698" coverage="Covered" coveredbranches="2" totalbranches="2" content="&#x9;&#x9;&#x9;&#x9;if (this.candidates.ContainsKey(exp))" />
      <LineAnalysis line="65" visits="-1" coverage="NotCoverable" coveredbranches="" totalbranches="" content="&#x9;&#x9;&#x9;&#x9;{" />
      <LineAnalysis line="66" visits="139" coverage="Covered" coveredbranches="" totalbranches="" content="&#x9;&#x9;&#x9;&#x9;&#x9;return this.Evaluate(exp);" />
      <LineAnalysis line="67" visits="-1" coverage="NotCoverable" coveredbranches="" totalbranches="" content="&#x9;&#x9;&#x9;&#x9;}" />
      <LineAnalysis line="68" visits="559" coverage="Covered" coveredbranches="" totalbranches="" content="&#x9;&#x9;&#x9;&#x9;return base.Visit(exp);" />
      <LineAnalysis line="69" visits="-1" coverage="NotCoverable" coveredbranches="" totalbranches="" content="&#x9;&#x9;&#x9;}" />
      <LineAnalysis line="70" visits="-1" coverage="NotCoverable" coveredbranches="" totalbranches="" content="" />
      <LineAnalysis line="71" visits="-1" coverage="NotCoverable" coveredbranches="" totalbranches="" content="&#x9;&#x9;&#x9;private Expression Evaluate(Expression e)" />
      <LineAnalysis line="72" visits="-1" coverage="NotCoverable" coveredbranches="" totalbranches="" content="&#x9;&#x9;&#x9;{" />
      <LineAnalysis line="73" visits="139" coverage="Covered" coveredbranches="2" totalbranches="2" content="&#x9;&#x9;&#x9;&#x9;if (e.NodeType == ExpressionType.Constant)" />
      <LineAnalysis line="74" visits="-1" coverage="NotCoverable" coveredbranches="" totalbranches="" content="&#x9;&#x9;&#x9;&#x9;{" />
      <LineAnalysis line="75" visits="67" coverage="Covered" coveredbranches="" totalbranches="" content="&#x9;&#x9;&#x9;&#x9;&#x9;return e;" />
      <LineAnalysis line="76" visits="-1" coverage="NotCoverable" coveredbranches="" totalbranches="" content="&#x9;&#x9;&#x9;&#x9;}" />
      <LineAnalysis line="77" visits="-1" coverage="NotCoverable" coveredbranches="" totalbranches="" content="" />
      <LineAnalysis line="78" visits="72" coverage="Covered" coveredbranches="" totalbranches="" content="&#x9;&#x9;&#x9;&#x9;LambdaExpression lambda = Expression.Lambda(e);" />
      <LineAnalysis line="79" visits="72" coverage="Covered" coveredbranches="" totalbranches="" content="&#x9;&#x9;&#x9;&#x9;object value = lambda.Execute();" />
      <LineAnalysis line="80" visits="72" coverage="Covered" coveredbranches="" totalbranches="" content="&#x9;&#x9;&#x9;&#x9;return Expression.Constant(value, e.Type);" />
      <LineAnalysis line="81" visits="-1" coverage="NotCoverable" coveredbranches="" totalbranches="" content="&#x9;&#x9;&#x9;}" />
      <LineAnalysis line="82" visits="-1" coverage="NotCoverable" coveredbranches="" totalbranches="" content="&#x9;&#x9;}" />
      <LineAnalysis line="83" visits="-1" coverage="NotCoverable" coveredbranches="" totalbranches="" content="" />
      <LineAnalysis line="84" visits="-1" coverage="NotCoverable" coveredbranches="" totalbranches="" content="&#x9;&#x9;/// &lt;summary&gt;" />
      <LineAnalysis line="85" visits="-1" coverage="NotCoverable" coveredbranches="" totalbranches="" content="&#x9;&#x9;/// Performs bottom-up analysis to determine which nodes can possibly" />
      <LineAnalysis line="86" visits="-1" coverage="NotCoverable" coveredbranches="" totalbranches="" content="&#x9;&#x9;/// be part of an evaluated sub-tree." />
      <LineAnalysis line="87" visits="-1" coverage="NotCoverable" coveredbranches="" totalbranches="" content="&#x9;&#x9;/// &lt;/summary&gt;" />
      <LineAnalysis line="88" visits="-1" coverage="NotCoverable" coveredbranches="" totalbranches="" content="&#x9;&#x9;private class Nominator : ExpressionVisitor" />
      <LineAnalysis line="89" visits="-1" coverage="NotCoverable" coveredbranches="" totalbranches="" content="&#x9;&#x9;{" />
      <LineAnalysis line="90" visits="-1" coverage="NotCoverable" coveredbranches="" totalbranches="" content="&#x9;&#x9;&#x9;private readonly Func&lt;Expression, bool&gt; fnCanBeEvaluated;" />
      <LineAnalysis line="91" visits="-1" coverage="NotCoverable" coveredbranches="" totalbranches="" content="&#x9;&#x9;&#x9;private IDictionary&lt;Expression, Expression&gt; candidates;" />
      <LineAnalysis line="92" visits="-1" coverage="NotCoverable" coveredbranches="" totalbranches="" content="&#x9;&#x9;&#x9;private bool cannotBeEvaluated;" />
      <LineAnalysis line="93" visits="-1" coverage="NotCoverable" coveredbranches="" totalbranches="" content="" />
      <LineAnalysis line="94" visits="105" coverage="Covered" coveredbranches="" totalbranches="" content="&#x9;&#x9;&#x9;internal Nominator(Func&lt;Expression, bool&gt; fnCanBeEvaluated)" />
      <LineAnalysis line="95" visits="-1" coverage="NotCoverable" coveredbranches="" totalbranches="" content="&#x9;&#x9;&#x9;{" />
      <LineAnalysis line="96" visits="105" coverage="Covered" coveredbranches="" totalbranches="" content="&#x9;&#x9;&#x9;&#x9;this.fnCanBeEvaluated = fnCanBeEvaluated;" />
      <LineAnalysis line="97" visits="105" coverage="Covered" coveredbranches="" totalbranches="" content="&#x9;&#x9;&#x9;}" />
      <LineAnalysis line="98" visits="-1" coverage="NotCoverable" coveredbranches="" totalbranches="" content="" />
      <LineAnalysis line="99" visits="-1" coverage="NotCoverable" coveredbranches="" totalbranches="" content="&#x9;&#x9;&#x9;internal IDictionary&lt;Expression, Expression&gt; Nominate(Expression expression)" />
      <LineAnalysis line="100" visits="-1" coverage="NotCoverable" coveredbranches="" totalbranches="" content="&#x9;&#x9;&#x9;{" />
      <LineAnalysis line="101" visits="105" coverage="Covered" coveredbranches="" totalbranches="" content="&#x9;&#x9;&#x9;&#x9;this.candidates = new Dictionary&lt;Expression, Expression&gt;();" />
      <LineAnalysis line="102" visits="105" coverage="Covered" coveredbranches="" totalbranches="" content="&#x9;&#x9;&#x9;&#x9;this.Visit(expression);" />
      <LineAnalysis line="103" visits="105" coverage="Covered" coveredbranches="" totalbranches="" content="&#x9;&#x9;&#x9;&#x9;return this.candidates;" />
      <LineAnalysis line="104" visits="-1" coverage="NotCoverable" coveredbranches="" totalbranches="" content="&#x9;&#x9;&#x9;}" />
      <LineAnalysis line="105" visits="-1" coverage="NotCoverable" coveredbranches="" totalbranches="" content="" />
      <LineAnalysis line="106" visits="-1" coverage="NotCoverable" coveredbranches="" totalbranches="" content="&#x9;&#x9;&#x9;public override Expression Visit(Expression expression)" />
      <LineAnalysis line="107" visits="-1" coverage="NotCoverable" coveredbranches="" totalbranches="" content="&#x9;&#x9;&#x9;{" />
      <LineAnalysis line="108" visits="812" coverage="Covered" coveredbranches="2" totalbranches="2" content="&#x9;&#x9;&#x9;&#x9;if (expression != null)" />
      <LineAnalysis line="109" visits="-1" coverage="NotCoverable" coveredbranches="" totalbranches="" content="&#x9;&#x9;&#x9;&#x9;{" />
      <LineAnalysis line="110" visits="769" coverage="Covered" coveredbranches="" totalbranches="" content="&#x9;&#x9;&#x9;&#x9;&#x9;bool saveCannotBeEvaluated = this.cannotBeEvaluated;" />
      <LineAnalysis line="111" visits="769" coverage="Covered" coveredbranches="" totalbranches="" content="&#x9;&#x9;&#x9;&#x9;&#x9;this.cannotBeEvaluated = false;" />
      <LineAnalysis line="112" visits="769" coverage="Covered" coveredbranches="" totalbranches="" content="&#x9;&#x9;&#x9;&#x9;&#x9;base.Visit(expression);" />
      <LineAnalysis line="113" visits="769" coverage="Covered" coveredbranches="2" totalbranches="2" content="&#x9;&#x9;&#x9;&#x9;&#x9;if (!this.cannotBeEvaluated)" />
      <LineAnalysis line="114" visits="-1" coverage="NotCoverable" coveredbranches="" totalbranches="" content="&#x9;&#x9;&#x9;&#x9;&#x9;{" />
      <LineAnalysis line="115" visits="467" coverage="Covered" coveredbranches="4" totalbranches="4" content="&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;if (this.fnCanBeEvaluated(expression) &amp;&amp; !this.candidates.ContainsKey(expression))" />
      <LineAnalysis line="116" visits="-1" coverage="NotCoverable" coveredbranches="" totalbranches="" content="&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;{" />
      <LineAnalysis line="117" visits="210" coverage="Covered" coveredbranches="" totalbranches="" content="&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;this.candidates.Add(expression, expression);" />
      <LineAnalysis line="118" visits="-1" coverage="NotCoverable" coveredbranches="" totalbranches="" content="&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;}" />
      <LineAnalysis line="119" visits="-1" coverage="NotCoverable" coveredbranches="" totalbranches="" content="&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;else" />
      <LineAnalysis line="120" visits="-1" coverage="NotCoverable" coveredbranches="" totalbranches="" content="&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;{" />
      <LineAnalysis line="121" visits="257" coverage="Covered" coveredbranches="" totalbranches="" content="&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;this.cannotBeEvaluated = true;" />
      <LineAnalysis line="122" visits="-1" coverage="NotCoverable" coveredbranches="" totalbranches="" content="&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;}" />
      <LineAnalysis line="123" visits="-1" coverage="NotCoverable" coveredbranches="" totalbranches="" content="&#x9;&#x9;&#x9;&#x9;&#x9;}" />
      <LineAnalysis line="124" visits="769" coverage="Covered" coveredbranches="" totalbranches="" content="&#x9;&#x9;&#x9;&#x9;&#x9;this.cannotBeEvaluated |= saveCannotBeEvaluated;" />
      <LineAnalysis line="125" visits="-1" coverage="NotCoverable" coveredbranches="" totalbranches="" content="&#x9;&#x9;&#x9;&#x9;}" />
      <LineAnalysis line="126" visits="812" coverage="Covered" coveredbranches="" totalbranches="" content="&#x9;&#x9;&#x9;&#x9;return expression;" />
      <LineAnalysis line="127" visits="-1" coverage="NotCoverable" coveredbranches="" totalbranches="" content="&#x9;&#x9;&#x9;}" />
      <LineAnalysis line="128" visits="-1" coverage="NotCoverable" coveredbranches="" totalbranches="" content="&#x9;&#x9;}" />
      <LineAnalysis line="129" visits="-1" coverage="NotCoverable" coveredbranches="" totalbranches="" content="&#x9;}" />
      <LineAnalysis line="130" visits="-1" coverage="NotCoverable" coveredbranches="" totalbranches="" content="}" />
    </File>
  </Files>
</CoverageReport>