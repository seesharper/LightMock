<?xml version="1.0" encoding="utf-8"?>
<CoverageReport scope="LightMock.MatchExpressionRewriter">
  <Summary>
    <Class>LightMock.MatchExpressionRewriter</Class>
    <Assembly>LightMock</Assembly>
    <Files>
      <File>/Users/bernhardrichter/GitHub/LightMock/src/LightMock/MatchExpressionRewriter.cs</File>
    </Files>
    <Coveredlines>13</Coveredlines>
    <Uncoveredlines>0</Uncoveredlines>
    <Coverablelines>13</Coverablelines>
    <Totallines>71</Totallines>
    <Linecoverage>100</Linecoverage>
    <Coveredbranches>2</Coveredbranches>
    <Totalbranches>2</Totalbranches>
    <Branchcoverage>100</Branchcoverage>
  </Summary>
  <Metrics>
    <Element name="Rewrite">
      <Cyclomaticcomplexity>1</Cyclomaticcomplexity>
      <Linecoverage>100</Linecoverage>
      <Branchcoverage>100</Branchcoverage>
    </Element>
    <Element name="VisitMember">
      <Cyclomaticcomplexity>2</Cyclomaticcomplexity>
      <Linecoverage>100</Linecoverage>
      <Branchcoverage>100</Branchcoverage>
    </Element>
    <Element name="RepresentsIsAnyValueProperty">
      <Cyclomaticcomplexity>1</Cyclomaticcomplexity>
      <Linecoverage>100</Linecoverage>
      <Branchcoverage>100</Branchcoverage>
    </Element>
    <Element name="CreateMethodCallExpression">
      <Cyclomaticcomplexity>1</Cyclomaticcomplexity>
      <Linecoverage>100</Linecoverage>
      <Branchcoverage>100</Branchcoverage>
    </Element>
    <Element name="GetIsMethod">
      <Cyclomaticcomplexity>1</Cyclomaticcomplexity>
      <Linecoverage>100</Linecoverage>
      <Branchcoverage>100</Branchcoverage>
    </Element>
    <Element name="GetParameterType">
      <Cyclomaticcomplexity>1</Cyclomaticcomplexity>
      <Linecoverage>100</Linecoverage>
      <Branchcoverage>100</Branchcoverage>
    </Element>
  </Metrics>
  <Files>
    <File name="/Users/bernhardrichter/GitHub/LightMock/src/LightMock/MatchExpressionRewriter.cs">
      <LineAnalysis line="1" visits="-1" coverage="NotCoverable" coveredbranches="" totalbranches="" content="namespace LightMock" />
      <LineAnalysis line="2" visits="-1" coverage="NotCoverable" coveredbranches="" totalbranches="" content="{" />
      <LineAnalysis line="3" visits="-1" coverage="NotCoverable" coveredbranches="" totalbranches="" content="    using System;" />
      <LineAnalysis line="4" visits="-1" coverage="NotCoverable" coveredbranches="" totalbranches="" content="    using System.Linq;" />
      <LineAnalysis line="5" visits="-1" coverage="NotCoverable" coveredbranches="" totalbranches="" content="    using System.Linq.Expressions;" />
      <LineAnalysis line="6" visits="-1" coverage="NotCoverable" coveredbranches="" totalbranches="" content="    using System.Reflection;" />
      <LineAnalysis line="7" visits="-1" coverage="NotCoverable" coveredbranches="" totalbranches="" content="" />
      <LineAnalysis line="8" visits="-1" coverage="NotCoverable" coveredbranches="" totalbranches="" content="    /// &lt;summary&gt;" />
      <LineAnalysis line="9" visits="-1" coverage="NotCoverable" coveredbranches="" totalbranches="" content="    /// An &lt;see cref=&quot;ExpressionVisitor&quot;/&gt; that replaces references to the" />
      <LineAnalysis line="10" visits="-1" coverage="NotCoverable" coveredbranches="" totalbranches="" content="    /// &lt;see cref=&quot;The{TValue}.IsAnyValue&quot;/&gt; with a &lt;see cref=&quot;MethodCallExpression&quot;/&gt;" />
      <LineAnalysis line="11" visits="-1" coverage="NotCoverable" coveredbranches="" totalbranches="" content="    /// that represents calling the &lt;see cref=&quot;The{TValue}.Is&quot;/&gt; method." />
      <LineAnalysis line="12" visits="-1" coverage="NotCoverable" coveredbranches="" totalbranches="" content="    /// &lt;/summary&gt;" />
      <LineAnalysis line="13" visits="-1" coverage="NotCoverable" coveredbranches="" totalbranches="" content="    public class MatchExpressionRewriter : ExpressionVisitor" />
      <LineAnalysis line="14" visits="-1" coverage="NotCoverable" coveredbranches="" totalbranches="" content="    {" />
      <LineAnalysis line="15" visits="-1" coverage="NotCoverable" coveredbranches="" totalbranches="" content="" />
      <LineAnalysis line="16" visits="-1" coverage="NotCoverable" coveredbranches="" totalbranches="" content="        /// &lt;summary&gt;" />
      <LineAnalysis line="17" visits="-1" coverage="NotCoverable" coveredbranches="" totalbranches="" content="        /// Replaces references to the &lt;see cref=&quot;The{TValue}.IsAnyValue&quot;/&gt; with a &lt;see cref=&quot;MethodCallExpression&quot;/&gt;" />
      <LineAnalysis line="18" visits="-1" coverage="NotCoverable" coveredbranches="" totalbranches="" content="        /// that represents calling the &lt;see cref=&quot;The{TValue}.Is&quot;/&gt; method." />
      <LineAnalysis line="19" visits="-1" coverage="NotCoverable" coveredbranches="" totalbranches="" content="        /// &lt;/summary&gt;" />
      <LineAnalysis line="20" visits="-1" coverage="NotCoverable" coveredbranches="" totalbranches="" content="        /// &lt;param name=&quot;expression&quot;&gt;The &lt;see cref=&quot;LambdaExpression&quot;/&gt; to visit.&lt;/param&gt;" />
      <LineAnalysis line="21" visits="-1" coverage="NotCoverable" coveredbranches="" totalbranches="" content="        /// &lt;returns&gt;&lt;see cref=&quot;Expression&quot;/&gt;.&lt;/returns&gt;" />
      <LineAnalysis line="22" visits="-1" coverage="NotCoverable" coveredbranches="" totalbranches="" content="        public LambdaExpression Rewrite(LambdaExpression expression)" />
      <LineAnalysis line="23" visits="-1" coverage="NotCoverable" coveredbranches="" totalbranches="" content="        {" />
      <LineAnalysis line="24" visits="105" coverage="Covered" coveredbranches="" totalbranches="" content="            return (LambdaExpression)Visit(expression);" />
      <LineAnalysis line="25" visits="-1" coverage="NotCoverable" coveredbranches="" totalbranches="" content="        }" />
      <LineAnalysis line="26" visits="-1" coverage="NotCoverable" coveredbranches="" totalbranches="" content="" />
      <LineAnalysis line="27" visits="-1" coverage="NotCoverable" coveredbranches="" totalbranches="" content="        /// &lt;summary&gt;" />
      <LineAnalysis line="28" visits="-1" coverage="NotCoverable" coveredbranches="" totalbranches="" content="        /// Replaces references to the &lt;see cref=&quot;The{TValue}.IsAnyValue&quot;/&gt; with a &lt;see cref=&quot;MethodCallExpression&quot;/&gt;" />
      <LineAnalysis line="29" visits="-1" coverage="NotCoverable" coveredbranches="" totalbranches="" content="        /// that represents calling the &lt;see cref=&quot;The{TValue}.Is&quot;/&gt; method." />
      <LineAnalysis line="30" visits="-1" coverage="NotCoverable" coveredbranches="" totalbranches="" content="        /// &lt;/summary&gt;" />
      <LineAnalysis line="31" visits="-1" coverage="NotCoverable" coveredbranches="" totalbranches="" content="        /// &lt;param name=&quot;node&quot;&gt;The &lt;see cref=&quot;MemberExpression&quot;/&gt; to visit.&lt;/param&gt;" />
      <LineAnalysis line="32" visits="-1" coverage="NotCoverable" coveredbranches="" totalbranches="" content="        /// &lt;returns&gt;&lt;see cref=&quot;Expression&quot;/&gt;.&lt;/returns&gt;" />
      <LineAnalysis line="33" visits="-1" coverage="NotCoverable" coveredbranches="" totalbranches="" content="        protected override Expression VisitMember(MemberExpression node)" />
      <LineAnalysis line="34" visits="-1" coverage="NotCoverable" coveredbranches="" totalbranches="" content="        {" />
      <LineAnalysis line="35" visits="117" coverage="Covered" coveredbranches="" totalbranches="" content="            MemberInfo member = node.Member;" />
      <LineAnalysis line="36" visits="-1" coverage="NotCoverable" coveredbranches="" totalbranches="" content="" />
      <LineAnalysis line="37" visits="117" coverage="Covered" coveredbranches="2" totalbranches="2" content="            if (RepresentsIsAnyValueProperty(member))" />
      <LineAnalysis line="38" visits="-1" coverage="NotCoverable" coveredbranches="" totalbranches="" content="            {" />
      <LineAnalysis line="39" visits="37" coverage="Covered" coveredbranches="" totalbranches="" content="                return CreateMethodCallExpression(member);" />
      <LineAnalysis line="40" visits="-1" coverage="NotCoverable" coveredbranches="" totalbranches="" content="            }" />
      <LineAnalysis line="41" visits="-1" coverage="NotCoverable" coveredbranches="" totalbranches="" content="" />
      <LineAnalysis line="42" visits="80" coverage="Covered" coveredbranches="" totalbranches="" content="            return base.VisitMember(node);" />
      <LineAnalysis line="43" visits="-1" coverage="NotCoverable" coveredbranches="" totalbranches="" content="        }" />
      <LineAnalysis line="44" visits="-1" coverage="NotCoverable" coveredbranches="" totalbranches="" content="" />
      <LineAnalysis line="45" visits="-1" coverage="NotCoverable" coveredbranches="" totalbranches="" content="        private static bool RepresentsIsAnyValueProperty(MemberInfo member)" />
      <LineAnalysis line="46" visits="-1" coverage="NotCoverable" coveredbranches="" totalbranches="" content="        {" />
      <LineAnalysis line="47" visits="117" coverage="Covered" coveredbranches="" totalbranches="" content="            return member.Name == &quot;IsAnyValue&quot;;" />
      <LineAnalysis line="48" visits="-1" coverage="NotCoverable" coveredbranches="" totalbranches="" content="        }" />
      <LineAnalysis line="49" visits="-1" coverage="NotCoverable" coveredbranches="" totalbranches="" content="" />
      <LineAnalysis line="50" visits="-1" coverage="NotCoverable" coveredbranches="" totalbranches="" content="        private static Expression CreateMethodCallExpression(MemberInfo member)" />
      <LineAnalysis line="51" visits="-1" coverage="NotCoverable" coveredbranches="" totalbranches="" content="        {" />
      <LineAnalysis line="52" visits="37" coverage="Covered" coveredbranches="" totalbranches="" content="            var parameterExpression = Expression.Parameter(GetParameterType(member), &quot;v&quot;);" />
      <LineAnalysis line="53" visits="37" coverage="Covered" coveredbranches="" totalbranches="" content="            var trueConstantExpression = Expression.Constant(true, typeof(bool));" />
      <LineAnalysis line="54" visits="37" coverage="Covered" coveredbranches="" totalbranches="" content="            LambdaExpression trueExpression = Expression.Lambda(trueConstantExpression, parameterExpression);" />
      <LineAnalysis line="55" visits="37" coverage="Covered" coveredbranches="" totalbranches="" content="            MethodCallExpression methodCallExpression = Expression.Call(GetIsMethod(member), trueExpression);" />
      <LineAnalysis line="56" visits="37" coverage="Covered" coveredbranches="" totalbranches="" content="            return methodCallExpression;" />
      <LineAnalysis line="57" visits="-1" coverage="NotCoverable" coveredbranches="" totalbranches="" content="        }" />
      <LineAnalysis line="58" visits="-1" coverage="NotCoverable" coveredbranches="" totalbranches="" content="" />
      <LineAnalysis line="59" visits="-1" coverage="NotCoverable" coveredbranches="" totalbranches="" content="        private static MethodInfo GetIsMethod(MemberInfo member)" />
      <LineAnalysis line="60" visits="-1" coverage="NotCoverable" coveredbranches="" totalbranches="" content="        {" />
      <LineAnalysis line="61" visits="-1" coverage="NotCoverable" coveredbranches="" totalbranches="" content="            // ReSharper disable once PossibleNullReferenceException" />
      <LineAnalysis line="62" visits="111" coverage="Covered" coveredbranches="" totalbranches="" content="            return member.DeclaringType.GetTypeInfo().DeclaredMethods.Single(m =&gt; m.Name == &quot;Is&quot;);" />
      <LineAnalysis line="63" visits="-1" coverage="NotCoverable" coveredbranches="" totalbranches="" content="        }" />
      <LineAnalysis line="64" visits="-1" coverage="NotCoverable" coveredbranches="" totalbranches="" content="" />
      <LineAnalysis line="65" visits="-1" coverage="NotCoverable" coveredbranches="" totalbranches="" content="        private static Type GetParameterType(MemberInfo member)" />
      <LineAnalysis line="66" visits="-1" coverage="NotCoverable" coveredbranches="" totalbranches="" content="        {" />
      <LineAnalysis line="67" visits="-1" coverage="NotCoverable" coveredbranches="" totalbranches="" content="            // ReSharper disable once PossibleNullReferenceException" />
      <LineAnalysis line="68" visits="37" coverage="Covered" coveredbranches="" totalbranches="" content="            return member.DeclaringType.GenericTypeArguments[0];" />
      <LineAnalysis line="69" visits="-1" coverage="NotCoverable" coveredbranches="" totalbranches="" content="        }" />
      <LineAnalysis line="70" visits="-1" coverage="NotCoverable" coveredbranches="" totalbranches="" content="    }" />
      <LineAnalysis line="71" visits="-1" coverage="NotCoverable" coveredbranches="" totalbranches="" content="}" />
    </File>
  </Files>
</CoverageReport>