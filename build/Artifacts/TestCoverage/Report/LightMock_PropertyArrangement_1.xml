<?xml version="1.0" encoding="utf-8"?>
<CoverageReport scope="LightMock.PropertyArrangement`1">
  <Summary>
    <Class>LightMock.PropertyArrangement`1</Class>
    <Assembly>LightMock</Assembly>
    <Files>
      <File>/Users/bernhardrichter/GitHub/LightMock/src/LightMock/PropertyArrangement.cs</File>
    </Files>
    <Coveredlines>5</Coveredlines>
    <Uncoveredlines>0</Uncoveredlines>
    <Coverablelines>5</Coverablelines>
    <Totallines>39</Totallines>
    <Linecoverage>100</Linecoverage>
    <Coveredbranches>4</Coveredbranches>
    <Totalbranches>4</Totalbranches>
    <Branchcoverage>100</Branchcoverage>
  </Summary>
  <Metrics>
    <Element name="ctor">
      <Cyclomaticcomplexity>1</Cyclomaticcomplexity>
      <Linecoverage>100</Linecoverage>
      <Branchcoverage>100</Branchcoverage>
    </Element>
    <Element name="Execute">
      <Cyclomaticcomplexity>4</Cyclomaticcomplexity>
      <Linecoverage>100</Linecoverage>
      <Branchcoverage>100</Branchcoverage>
    </Element>
  </Metrics>
  <Files>
    <File name="/Users/bernhardrichter/GitHub/LightMock/src/LightMock/PropertyArrangement.cs">
      <LineAnalysis line="1" visits="-1" coverage="NotCoverable" coveredbranches="" totalbranches="" content="" />
      <LineAnalysis line="2" visits="-1" coverage="NotCoverable" coveredbranches="" totalbranches="" content="using System.Linq.Expressions;" />
      <LineAnalysis line="3" visits="-1" coverage="NotCoverable" coveredbranches="" totalbranches="" content="" />
      <LineAnalysis line="4" visits="-1" coverage="NotCoverable" coveredbranches="" totalbranches="" content="namespace LightMock" />
      <LineAnalysis line="5" visits="-1" coverage="NotCoverable" coveredbranches="" totalbranches="" content="{" />
      <LineAnalysis line="6" visits="-1" coverage="NotCoverable" coveredbranches="" totalbranches="" content="    /// &lt;summary&gt;" />
      <LineAnalysis line="7" visits="-1" coverage="NotCoverable" coveredbranches="" totalbranches="" content="    /// A class that represents an arrangement of a mocked property that" />
      <LineAnalysis line="8" visits="-1" coverage="NotCoverable" coveredbranches="" totalbranches="" content="    /// returns a value of type &lt;typeparamref name=&quot;TResult&quot;/&gt;." />
      <LineAnalysis line="9" visits="-1" coverage="NotCoverable" coveredbranches="" totalbranches="" content="    /// &lt;/summary&gt;" />
      <LineAnalysis line="10" visits="-1" coverage="NotCoverable" coveredbranches="" totalbranches="" content="    /// &lt;typeparam name=&quot;TResult&quot;&gt;The type of the return value of the mocked property.&lt;/typeparam&gt;" />
      <LineAnalysis line="11" visits="-1" coverage="NotCoverable" coveredbranches="" totalbranches="" content="    public class PropertyArrangement&lt;TResult&gt; : Arrangement" />
      <LineAnalysis line="12" visits="-1" coverage="NotCoverable" coveredbranches="" totalbranches="" content="    {" />
      <LineAnalysis line="13" visits="-1" coverage="NotCoverable" coveredbranches="" totalbranches="" content="        private TResult result;" />
      <LineAnalysis line="14" visits="-1" coverage="NotCoverable" coveredbranches="" totalbranches="" content="" />
      <LineAnalysis line="15" visits="-1" coverage="NotCoverable" coveredbranches="" totalbranches="" content="        /// &lt;summary&gt;" />
      <LineAnalysis line="16" visits="-1" coverage="NotCoverable" coveredbranches="" totalbranches="" content="        /// Initializes a new instance of the &lt;see cref=&quot;PropertyArrangement{TResult}&quot;/&gt; class." />
      <LineAnalysis line="17" visits="-1" coverage="NotCoverable" coveredbranches="" totalbranches="" content="        /// &lt;/summary&gt;" />
      <LineAnalysis line="18" visits="-1" coverage="NotCoverable" coveredbranches="" totalbranches="" content="        /// &lt;param name=&quot;expression&quot;&gt;The &lt;see cref=&quot;LambdaExpression&quot;/&gt; that specifies" />
      <LineAnalysis line="19" visits="-1" coverage="NotCoverable" coveredbranches="" totalbranches="" content="        /// where to apply this &lt;see cref=&quot;Arrangement&quot;/&gt;.&lt;/param&gt;" />
      <LineAnalysis line="20" visits="-1" coverage="NotCoverable" coveredbranches="" totalbranches="" content="        public PropertyArrangement(LambdaExpression expression)" />
      <LineAnalysis line="21" visits="1" coverage="Covered" coveredbranches="" totalbranches="" content="            : base(expression)" />
      <LineAnalysis line="22" visits="-1" coverage="NotCoverable" coveredbranches="" totalbranches="" content="        {" />
      <LineAnalysis line="23" visits="1" coverage="Covered" coveredbranches="" totalbranches="" content="        }" />
      <LineAnalysis line="24" visits="-1" coverage="NotCoverable" coveredbranches="" totalbranches="" content="" />
      <LineAnalysis line="25" visits="-1" coverage="NotCoverable" coveredbranches="" totalbranches="" content="        /// &lt;summary&gt;" />
      <LineAnalysis line="26" visits="-1" coverage="NotCoverable" coveredbranches="" totalbranches="" content="        /// Executes the arrangement." />
      <LineAnalysis line="27" visits="-1" coverage="NotCoverable" coveredbranches="" totalbranches="" content="        /// &lt;/summary&gt;" />
      <LineAnalysis line="28" visits="-1" coverage="NotCoverable" coveredbranches="" totalbranches="" content="        /// &lt;param name=&quot;arguments&quot;&gt;The arguments used to invoke the mocked method.&lt;/param&gt;" />
      <LineAnalysis line="29" visits="-1" coverage="NotCoverable" coveredbranches="" totalbranches="" content="        /// &lt;returns&gt;The registered return value, if any, otherwise, the default value.&lt;/returns&gt;" />
      <LineAnalysis line="30" visits="-1" coverage="NotCoverable" coveredbranches="" totalbranches="" content="        internal override object Execute(object[] arguments)" />
      <LineAnalysis line="31" visits="-1" coverage="NotCoverable" coveredbranches="" totalbranches="" content="        {" />
      <LineAnalysis line="32" visits="3" coverage="Covered" coveredbranches="" totalbranches="" content="            base.Execute(arguments);" />
      <LineAnalysis line="33" visits="-1" coverage="NotCoverable" coveredbranches="" totalbranches="" content="" />
      <LineAnalysis line="34" visits="4" coverage="Covered" coveredbranches="4" totalbranches="4" content="            if (arguments != null &amp;&amp; arguments.Length &gt; 0) result = (TResult)arguments[0];" />
      <LineAnalysis line="35" visits="-1" coverage="NotCoverable" coveredbranches="" totalbranches="" content="" />
      <LineAnalysis line="36" visits="3" coverage="Covered" coveredbranches="" totalbranches="" content="            return result;" />
      <LineAnalysis line="37" visits="-1" coverage="NotCoverable" coveredbranches="" totalbranches="" content="        }" />
      <LineAnalysis line="38" visits="-1" coverage="NotCoverable" coveredbranches="" totalbranches="" content="    }" />
      <LineAnalysis line="39" visits="-1" coverage="NotCoverable" coveredbranches="" totalbranches="" content="}" />
    </File>
  </Files>
</CoverageReport>